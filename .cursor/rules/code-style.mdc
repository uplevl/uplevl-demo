---
description: Uplevl Next.js + TypeScript Code Style Guide
alwaysApply: true
---

# Code Style Rules

## General Guidelines

- Prefer **function declarations** over expressions when defining functions inside React components.
- Use **arrow functions only** for inline callbacks (e.g., event handlers or simple `.map()` calls).
- Apply **guard clauses** to simplify logic and reduce nesting—avoid deeply nested `if` statements or `switch` blocks.
- Adhere to **SOLID principles** where applicable, especially Single Responsibility and Dependency Inversion.
- Apply **DRY (Don't Repeat Yourself)** to reduce duplication and improve maintainability.
- Write clear, **JSDoc blocks** for all public functions and exported utilities. Describe purpose, expected behavior, and edge cases.
- **Do not document types** in JSDoc—TypeScript already handles this. Only use `@param` or `@returns` to explain behavior or purpose.
- Use **descriptive variable and function names**—avoid vague names like `data`, `info`, or `handleThing`.
- Prefer **named exports** over default exports, unless there's a clear reason to do otherwise.

## Next.js Specific Guidelines

- **Use App Router patterns** with proper file conventions (`page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx`).
- **Distinguish Server vs Client Components**:
  - Use `"use client"` directive only when necessary (forms, event handlers, browser APIs, state).
  - Keep Server Components as the default for better performance and SEO.
  - Fetch data in Server Components when possible using `async` functions.
- **Organize routes** using the `app/` directory structure with proper nested layouts.
- **Use Metadata API** for SEO (`generateMetadata` function or `metadata` export).
- **Handle loading and error states** with dedicated `loading.tsx` and `error.tsx` files.

## JSX & Component Style

- Split large components into logical sections with **inline comments** to explain their purpose.
- Use **inline comments** to describe intent or non-obvious implementation details. Write for the "future you" or another developer.
- Avoid deeply nested JSX; break out complex logic into **subcomponents** or helper functions.
- Use **destructuring** in function arguments and hooks (e.g., `const { foo } = props`) to improve readability.
- Keep **effect hooks** (`useEffect`, `useLayoutEffect`) clean and focused. Extract side-effect logic into separate functions when possible.
- Use **TypeScript interfaces** for all component props and return types for public functions.
- Prefer **explicit return types** on exported functions to improve readability and prevent type regression.

## Data Fetching & State Management

- Use **React Query** (`@tanstack/react-query`) for server state management with proper query keys.
- Use **Zustand** for client-side state that needs to be shared across components.
- Keep **server actions** in dedicated files under `src/actions/` or co-located with components.
- Use **Drizzle ORM** queries in service functions, not directly in components or actions.
- Implement proper **error boundaries** and loading states for data fetching operations.

## Styling & UI Guidelines

- Use **Tailwind CSS** for styling with consistent design tokens.
- Leverage **Radix UI** components as the foundation for custom UI components.
- Use **class-variance-authority (CVA)** for component variants and **tailwind-merge** for conditional classes.
- Keep styling **responsive-first** with mobile-first breakpoints.
- Use **CSS-in-JS** (via Tailwind) rather than separate CSS files for component-specific styles.

## Form Handling

- Use **React Hook Form** with **Zod** validation for all forms.
- Implement **server actions** for form submissions with proper error handling.
- Use **TypeScript interfaces** derived from Zod schemas for type safety.
- Provide clear **validation feedback** and loading states during form submission.

## File Organization

- Group related files in **feature-based directories** under `src/components/features/`.
- Keep **utility functions** in `src/lib/` with clear, single-purpose modules.
- Place **database schemas** in `src/database/schema.ts` with proper relations.
